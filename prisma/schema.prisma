generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                        BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name                      String    @db.VarChar(255)
  avatar                    String?   @db.MediumText
  login                     String    @unique(map: "users_login_unique") @db.VarChar(255)
  email                     String    @unique(map: "users_email_unique") @db.VarChar(255)
  phone                     String?   @db.VarChar(255)
  birthday                  String?   @db.VarChar(255)
  email_verified_at         DateTime? @db.Timestamp(0)
  password                  String    @db.Text
  two_factor_secret         String?   @db.Text
  two_factor_recovery_codes String?   @db.Text
  two_factor_confirmed_at   DateTime? @db.Timestamp(0)
  remember_token            String?   @db.VarChar(100)
  current_team_id           BigInt?   @db.UnsignedBigInt
  profile_photo_path        String?   @db.VarChar(2048)
  profile                   String    @default("user")
  bep20_address             String?   @db.VarChar(255)
  bep20_public_key          String?   @db.MediumText
  bep20_private_key         String?   @db.MediumText
  last_login                DateTime? @db.DateTime(0)
  last_login_ip             String?   @db.VarChar(45)
  country_code              String?   @db.VarChar(255)
  country_name              String?   @db.VarChar(255)

  latitude  String?
  longitude String?

  document_type DocumentType? @default(CPF)
  document      String?
  gender        String?

  sponsor    User?   @relation("sponsor", fields: [sponsor_id], references: [id])
  sponsor_id BigInt? @db.UnsignedBigInt

  sponsor_migration String?

  binary_parent_id BigInt?         @db.UnsignedBigInt
  position         users_position?
  is_active        Boolean         @default(false)

  ancestry String? @db.Text

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  users_users_binary_parent_idTousers       User?  @relation("users_binary_parent_idTousers", fields: [binary_parent_id], references: [id], onUpdate: Restrict, map: "users_binary_parent_id_foreign")
  other_users_users_binary_parent_idTousers User[] @relation("users_binary_parent_idTousers")
  users_users_sponsor_idTousers             User?  @relation("users_sponsor_idTousers", fields: [sponsor_id], references: [id], onUpdate: Restrict, map: "users_sponsor_id_foreign")
  other_users_users_sponsor_idTousers       User[] @relation("users_sponsor_idTousers")

  User                   User[]                  @relation("sponsor")
  StrategyBinary         StrategyBinary[]        @relation("user")
  UserSession            UserSession[]           @relation("user")
  Order                  Order[]                 @relation("user")
  OrderItemDistribution  OrderItemDistribution[] @relation("user")
  StrategyProgress       StrategyProgress[]      @relation("user")
  Balance                Balance[]               @relation("user")
  BalanceHistory         BalanceHistory[]        @relation("user")
  StrategyBinaryPay      StrategyBinaryPay[]     @relation("user")
  Commission             Commission[]            @relation("user")
  Wallet                 Wallet[]
  CommissionOrder        CommissionOrder[]       @relation("user")
  Withdraw               Withdraw[]              @relation("user")
  BalanceOrder           BalanceOrder[]          @relation("user")
  BalanceOrderReleasedBy BalanceOrder[]          @relation("releasedBY")
  OrderPaymentoBy        Order[]                 @relation("paymentBy")

  @@index([binary_parent_id], map: "users_binary_parent_id_foreign")
  @@index([sponsor_id], map: "users_sponsor_id_foreign")
  @@map("users")
}

model Balance {
  user    User       @relation("user", fields: [user_id], references: [id])
  user_id BigInt     @db.UnsignedBigInt
  wallet  WalletType @default(MAIN)
  amount  Decimal    @db.Decimal(20, 8)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@id(name: "balanceId", [user_id, wallet])
  @@unique([user_id, wallet])
  @@map("balance")
}

model BalanceHistory {
  id        Int                  @id @default(autoincrement())
  name      String?
  user      User                 @relation("user", fields: [user_id], references: [id])
  user_id   BigInt               @db.UnsignedBigInt
  wallet    WalletType           @default(MAIN)
  direction BalanceDirectionType
  amount    Decimal              @db.Decimal(20, 8)

  ref_type String?
  ref_id   BigInt?

  extra_info Json?

  status StatusBalance @default(ACTIVE)

  created_at DateTime?    @default(now())
  updated_at DateTime?    @updatedAt
  Commission Commission[] @relation("commission")
  Withdraw   Withdraw[]   @relation("commission")

  @@map("balance_history")
}

model BalanceOrder {
  id Int @id @default(autoincrement())

  description String

  user    User   @relation("user", fields: [user_id], references: [id])
  user_id BigInt @db.UnsignedBigInt

  releasedBy     User   @relation("releasedBY", fields: [released_by_id], references: [id])
  released_by_id BigInt @db.UnsignedBigInt

  amount Decimal @db.Decimal(20, 8)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("balance_order")
}

enum StatusBalance {
  ACTIVE
  INACTIVE
}

model PasswordResetToken {
  email String @id @db.VarChar(255)
  token String @db.VarChar(255)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("password_reset_tokens")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model PasswordReset {
  id    BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  email String @db.VarChar(255)
  token String @db.VarChar(255)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@index([email], map: "password_resets_email_index")
  @@map("password_resets")
}

model PersonalAccessToken {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
  @@map("personal_access_tokens")
}

model Product {
  id          BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  name        String              @db.VarChar(100)
  description String?             @db.Text
  price       Decimal             @db.Decimal(20, 8)
  points      Decimal             @default(0) @db.Decimal(20, 8)
  yield_type  products_yield_type @default(diary)
  yield       Decimal             @db.Decimal(20, 8)

  hidden      Boolean?  @default(false)
  category    Category? @relation(fields: [category_id], references: [id])
  category_id BigInt?   @db.UnsignedBigInt

  images Json?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  OrderItem OrderItem[] @relation("product")

  @@map("products")
}

model Wallet {
  id      BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  name    String
  user    User   @relation(fields: [user_id], references: [id])
  user_id BigInt @db.UnsignedBigInt

  hash String @db.VarChar(100)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  OrderItem OrderItem[] @relation("wallet")

  Commission Commission[] @relation("wallet")

  @@map("wallet")
}

model Category {
  id   BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  name String @db.VarChar(100)

  direct_bonus        Boolean?
  direct_bonus_yield  Decimal? @db.Decimal(20, 8)
  direct_bonus_levels Int?

  unilevel_bonus        Boolean? @default(false)
  unilevel_bonus_yield  Decimal? @db.Decimal(20, 8)
  unilevel_bonus_levels Int?

  residual_bonus        Boolean?
  residual_bonus_yield  Decimal? @db.Decimal(20, 8)
  residual_bonus_levels Int?

  binary_bonus               Boolean? @default(false)
  binary_bonus_position      Boolean? @default(false)
  binary_bonus_yield         Decimal? @db.Decimal(20, 8)
  binary_bonus_point_percent Decimal? @db.Decimal(20, 8)
  binary_bonus_levels        Int?
  binary_bonus_qualify       Boolean  @default(false)

  commission                       Boolean?            @default(false)
  commission_pay_type              products_yield_type @default(diary)
  commission_pay_config            Json?
  commission_yield_type            products_yield_type @default(diary)
  commission_yield_type_commission String?
  commission_yield_config          Json?

  CategoryItem CategoryItem[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  Product             Product[]
  CommissionScheduler CommissionScheduler[] @relation("category")

  @@map("categories")
}

model CategoryItem {
  id           BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  type         StrategyConfigType
  category     Category           @relation(fields: [category_id], references: [id])
  category_id  BigInt             @db.UnsignedBigInt
  max_value    Decimal?           @db.Decimal(20, 8)
  level_values Json

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@unique([type, category_id, max_value])
  @@map("category_items")
}

model UserSession {
  id           BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  access_token String  @db.LongText
  ip_address   String? @db.VarChar(45)

  latitude  String?
  longitude String?

  user    User?   @relation("user", fields: [user_id], references: [id])
  user_id BigInt? @db.UnsignedBigInt

  status user_session @default(active)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("user_session")
}

model Session {
  id      String  @id @db.VarChar(255)
  user_id BigInt? @db.UnsignedBigInt

  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.LongText
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
  @@map("sessions")
}

model StrategyBinary {
  id      BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  user    User?   @relation("user", fields: [user_id], references: [id])
  user_id BigInt? @db.UnsignedBigInt

  ref           String @default("")
  hier          String @db.LongText()
  level         Int    @default(0)
  autoDirection String @default("L")

  parent    StrategyBinary? @relation("parent", fields: [parent_id], references: [id])
  parent_id BigInt?         @db.UnsignedBigInt

  left         StrategyBinary? @relation("left", fields: [left_id], references: [id])
  left_id      BigInt?         @db.UnsignedBigInt
  left_count   BigInt          @default(0)
  // left_point   BigInt          @default(0)
  left_qualify Boolean         @default(false)

  right         StrategyBinary? @relation("right", fields: [right_id], references: [id])
  right_id      BigInt?         @db.UnsignedBigInt
  right_count   BigInt          @default(0)
  // right_point   BigInt          @default(0)
  right_qualify Boolean         @default(false)

  qualify  Boolean                 @default(false)
  strategy StrategyBinaryDirection @default(AUTO)

  date_check String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  ParentStrategyBinary StrategyBinary[]    @relation("parent")
  LeftStrategyBinary   StrategyBinary[]    @relation("left")
  RightStrategyBinary  StrategyBinary[]    @relation("right")
  StrategyBinaryPay    StrategyBinaryPay[] @relation("parent")

  @@map("strategy_binary")
}

model StrategyBinaryPay {
  id                  BigInt                     @id @default(autoincrement()) @db.UnsignedBigInt
  direction           StrategyBinaryPayDirection @default(NONE)
  date                String
  binary              StrategyBinary             @relation("parent", fields: [binary_id], references: [id])
  binary_id           BigInt                     @db.UnsignedBigInt
  user                User                       @relation("user", fields: [user_id], references: [id])
  user_id             BigInt                     @db.UnsignedBigInt
  amount              Decimal                    @db.Decimal(20, 8)
  amountCeilingUser   Decimal?                   @db.Decimal(20, 8)
  percentTotalCeiling Decimal?                   @db.Decimal(20, 8)
  amountTotalCeiling  Decimal?                   @db.Decimal(20, 8)
  amountPayed         Decimal?                   @default(0) @db.Decimal(20, 8)
  points              Decimal                    @db.Decimal(20, 8)
  qualify             Boolean                    @default(false)
  mirror              Json?

  status StatusBinaryPay @default(PENDING)

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  @@unique([date, binary_id, user_id])
  @@map("strategy_binary_pay")
}

model StrategyConfig {
  id      BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  type    StrategyConfigType
  level   Int
  value   Decimal?           @db.Decimal(20, 8)
  limit   Decimal?           @db.Decimal(20, 8)
  percent Decimal?           @db.Decimal(20, 8)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@unique([type, level, value])
  @@map("strategy_config")
}

model StrategyProgress {
  type    StrategyConfigType
  user    User               @relation("user", fields: [user_id], references: [id])
  user_id BigInt             @db.UnsignedBigInt

  amount Decimal @default(0) @db.Decimal(20, 8)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@id([type, user_id])
  @@unique([type, user_id])
  @@map("strategy_progress")
}

enum StrategyConfigType {
  DIRECT
  UNILEVEL
  UNILEVER
  BINARY
  RESIDUAL
}

model Order {
  id       BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  order_id String
  user     User    @relation("user", fields: [user_id], references: [id])
  user_id  BigInt  @db.UnsignedBigInt
  total    Decimal @default(0) @db.Decimal(20, 8)

  payment_method OrderPaymentmMethod @default(UNKNOWN)
  payment        Json?
  payment_result Json?

  paymentBy     User?   @relation("paymentBy", fields: [payment_by_id], references: [id])
  payment_by_id BigInt? @db.UnsignedBigInt

  status                Status                  @default(init)
  created_at            DateTime                @default(now())
  updated_at            DateTime?               @updatedAt
  OrderItem             OrderItem[]             @relation("order")
  OrderItemDistribution OrderItemDistribution[] @relation("order")

  @@map("order")
}

model OrderItem {
  id       BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  order    Order  @relation("order", fields: [order_id], references: [id])
  order_id BigInt @db.UnsignedBigInt

  product    Product @relation("product", fields: [product_id], references: [id])
  product_id BigInt  @db.UnsignedBigInt

  quantity Int     @default(1)
  amount   Decimal @db.Decimal(20, 8)

  wallet    Wallet? @relation("wallet", fields: [wallet_id], references: [id])
  wallet_id BigInt? @db.UnsignedBigInt

  info Json?

  created_at            DateTime                @default(now())
  updated_at            DateTime?               @updatedAt
  OrderItemDistribution OrderItemDistribution[] @relation("orderItem")
  Commission            Commission[]            @relation("orderItem")

  @@map("order_item")
}

model OrderItemDistribution {
  id       BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  strategy StrategyType
  status   StrategyStatusType
  amount   Decimal            @db.Decimal(20, 8)
  percent  Decimal            @db.Decimal(20, 8)

  order    Order  @relation("order", fields: [order_id], references: [id])
  order_id BigInt @db.UnsignedBigInt

  orderItem     OrderItem @relation("orderItem", fields: [order_item_id], references: [id])
  order_item_id BigInt    @db.UnsignedBigInt

  user    User   @relation("user", fields: [user_id], references: [id])
  user_id BigInt @db.UnsignedBigInt

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@unique([order_item_id, user_id, strategy], name: "order_item_distribution_idx")
  @@map("order_item_distribution")
}

model CommissionOrder {
  id      BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  obs     String          @db.MediumText
  user    User            @relation("user", fields: [user_id], references: [id])
  user_id BigInt          @db.UnsignedBigInt
  total   Decimal         @db.Decimal(20, 8)
  status  CommisionStatus @default(PENDING)

  created_at DateTime?    @default(now())
  updated_at DateTime?    @updatedAt
  Commission Commission[] @relation("commissionOrder")
  Withdraw   Withdraw[]   @relation("commissionOrder")

  @@map("commission_order")
}

model Withdraw {
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt

  user    User   @relation("user", fields: [user_id], references: [id])
  user_id BigInt @db.UnsignedBigInt

  wallet String? @db.MediumText

  amount Decimal @db.Decimal(20, 8)

  obs String? @db.MediumText

  status StatusWithdraw @default(PENDING)

  balanceHistory     BalanceHistory? @relation("commission", fields: [balance_history_id], references: [id])
  balance_history_id Int?

  commissionOrder     CommissionOrder? @relation("commissionOrder", fields: [commission_order_id], references: [id])
  commission_order_id BigInt?          @db.UnsignedBigInt

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("withdraw")
}

model Commission {
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt

  commissionOrder     CommissionOrder? @relation("commissionOrder", fields: [commission_order_id], references: [id])
  commission_order_id BigInt?          @db.UnsignedBigInt

  scheduler    CommissionScheduler @relation("scheduler", fields: [scheduler_id], references: [id])
  scheduler_id BigInt              @db.UnsignedBigInt

  user    User   @relation("user", fields: [user_id], references: [id])
  user_id BigInt @db.UnsignedBigInt

  orderItem     OrderItem @relation("orderItem", fields: [order_item_id], references: [id])
  order_item_id BigInt    @db.UnsignedBigInt

  wallet    Wallet? @relation("wallet", fields: [wallet_id], references: [id])
  wallet_id BigInt? @db.UnsignedBigInt

  status CommisionStatus @default(PENDING)

  amount  Decimal @db.Decimal(20, 8)
  total   Decimal @db.Decimal(20, 8)
  percent Decimal @db.Decimal(20, 8)

  diffDays Int @default(1)

  date DateTime

  balanceHistory     BalanceHistory? @relation("commission", fields: [balance_history_id], references: [id])
  balance_history_id Int?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@unique([scheduler_id, user_id, order_item_id])
  @@map("commission")
}

model CommissionScheduler {
  id          BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  type        SchedulerCommisionType
  category    Category               @relation("category", fields: [category_id], references: [id])
  category_id BigInt                 @db.UnsignedBigInt

  status SchedulerCommisionStatus @default(SCHEDULER)

  amount Decimal @db.Decimal(20, 8)

  date DateTime

  created_at DateTime?    @default(now())
  updated_at DateTime?    @updatedAt
  Commission Commission[] @relation("scheduler")

  @@unique([type, category_id, date])
  @@map("commission_scheduler")
}

model ImportOrders {
  id   BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  info Json?

  @@map("import_orders")
}

model Webhook {
  id      BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  request Json?

  @@map("webhook")
}

enum SchedulerCommisionType {
  COMMISSION
  RESIDUAL
}

enum SchedulerCommisionStatus {
  SCHEDULER
  DONE
  CANCEL
}

enum CommisionStatus {
  PENDING
  ASSOCIATED
  PAYED
  CANCEL
}

enum products_yield_type {
  diary
  weekly
  monthly
  semiannual
  annual
}

enum users_profile {
  admin
  user
  admin_watch
}

enum users_position {
  left
  right
}

enum user_session {
  active
  inactive
}

enum Status {
  init
  pending
  done
  canceled
}

enum StrategyType {
  DIRECT
  UNILEVEL
  UNILEVER
  BINARY
  RESIDUAL
}

enum StrategyStatusType {
  QUEUED
  ERROR
  DONE
}

enum WalletType {
  MAIN
  PENDING
  WITHDRAW
  GENERAL_POINT
  BINARY_CEILING_USER
  BINARY_LEFT_POINT
  BINARY_RIGHT_POINT
  BINARY_LEFT_POINT_PAY
  BINARY_RIGHT_POINT_PAY
  DIRECT_BONUS
  WINWIN_BONUS
  TOKENWAY_BONUS
  TOKENTEEN_BONUS
  TOKENONE_BONUS
  BINARY_BONUS
}

enum BalanceDirectionType {
  CREDIT
  DEBIT
}

enum StatusBinaryPay {
  PENDING
  PAYED
  ERROR
  NOTQUALIFY
}

enum StatusWithdraw {
  PENDING
  SCHEDULER
  PAYED
  REJECT
  CANCELED
}

enum OrderPaymentmMethod {
  UNKNOWN
  BALANCE
  CRIPTO
  PLISIO
}

enum StrategyBinaryPayDirection {
  NONE
  LEFT
  RIGHT
}

enum StrategyBinaryDirection {
  AUTO
  RIGHT
  LEFT
}

enum DocumentType {
  CPF
  CNPJ
}
